# Problem 12: 
# 
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
# would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

import math

# can not do this one with brute force method need a way to calculate the number of divisors efficiently

# function to count the number of divisors for 'n'


def countDivisors(n):
    cnt = 0

    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            # If divisors are equal,
            # count only one
            if n / i == i:
                cnt = cnt + 1
            else:  # Otherwise count both
                cnt = cnt + 2
    return cnt


# print(countDivisors(76576500))

# triangle Number

# get the next triangle number
def triangleNum():
    triNum = 1
    N = 1
    while True:
        yield triNum
        N += 1
        triNum += N


if __name__ == "__main__":

    for i in triangleNum():
        if countDivisors(i) >= 500:
            print(i)
            break